{"version":3,"sources":["components/Body.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["date","moment","Body","props","useState","value","setValue","allDayList","setAllDayList","useEffect","end","Number","endOf","format","AllDaysInMonth","i","push","console","log","currentDay","className","Array","startOf","map","item","index","length","key","onClick","clone","subtract","add","weekDays","Header","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+LAGMA,EAAOC,MAgKEC,EA9JF,SAACC,GAAU,MAGMC,mBAASH,OAHf,mBAGbI,EAHa,KAGNC,EAHM,OAIgBF,mBAAS,IAJzB,mBAIbG,EAJa,KAIDC,EAJC,KAMpBC,qBAAU,WASN,IAHA,IAAMC,EAAMC,OAAOV,IAAOI,GAAOO,MAAM,SAASC,OAAO,MAEnDC,EAAiB,GACZC,EAAE,EAAGA,GAAGL,EAAKK,IACfA,EAAE,GACDD,EAAeE,KAAf,WAAwBD,IAExBD,EAAeE,KAAf,UAAuBD,IAI/BP,EAAcM,KAEf,CAACT,IAEJY,QAAQC,IAAIX,GAkCZ,IAAMY,EAAa,WACf,OAAGR,OAAON,EAAMQ,OAAO,MAAM,GAClB,IAAIR,EAAMQ,OAAO,KAEpBR,EAAMQ,OAAO,MAIzB,OACI,kBAAC,WAAD,KACC,yBAAKO,UAAU,QA0CR,YAAIC,MAAMV,OAAOV,IAAOI,GAAOiB,QAAQ,SAAST,OAAO,OAAO,MAAMU,KAAI,SAACC,EAAMC,GAC3E,OACK,iCAOTlB,EAAWmB,OAAS,GACpBnB,EAAWgB,KAAI,SAACC,EAAKT,GACjB,OACI,kBAAC,WAAD,CAAUY,IAAKZ,GACdE,QAAQC,IAAIC,KAELK,IAASL,KAAgBlB,IAAOD,GAAMa,OAAO,UAAYZ,IAAOI,GAAOQ,OAAO,SAAWZ,IAAOD,GAAMa,OAAO,UAAYZ,IAAOI,GAAOQ,OAAO,QAC9I,yBAAKO,UAAU,cACX,8BAAOI,GACP,0BAAMJ,UAAU,SAAhB,UAED,yBAAKA,UAAU,cACd,8BAAOI,SASxC,yBAAKJ,UAAU,UAEEnB,IAAO,UAAW,WAAWY,OAAO,UAAYZ,IAAOI,GAAOQ,OAAO,SAAWZ,IAAO,UAAW,WAAWY,OAAO,UAAYZ,IAAOI,GAAOQ,OAAO,QAC/J,GACY,0BAAMe,QAAS,kBAAMtB,EA7F5BD,EAAMwB,QAAQC,SAAS,EAAG,YA6FnB,QAElB,yBAAKV,UAAU,aAvGJf,EAAMQ,OAAO,QAuGxB,IAnGWR,EAAMQ,OAAO,SAuGxB,0BAAMe,QAAS,kBAAMtB,EA/FVD,EAAMwB,QAAQE,IAAI,EAAG,YA+FhC,WC5JEC,EAAW,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAuBrEC,EArBA,SAAC9B,GACd,OACE,kBAAC,WAAD,KACE,yBAAKiB,UAAU,UAEXY,EAAST,KAAI,SAACC,EAAKC,GAClB,OACC,0BAAML,UAAU,aAAaO,IAAKF,GAChCD,OAMR,yBAAKJ,UAAU,iBAAf,cCPSc,G,MARA,SAAC/B,GACd,OACE,+EACgDF,MAASY,OAAO,WCUrDsB,MAVf,WACE,OACE,yBAAKf,UAAU,OACZ,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCagB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.5482541f.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\r\nimport moment from 'moment';\r\n\r\nconst date = moment()\r\n\r\nconst Body = (props) => {\r\n\r\n    // const [calendar, setCalendar] = useState([])\r\n    const [value, setValue] = useState(moment())\r\n    const [allDayList, setAllDayList] = useState([])\r\n\r\n    useEffect(() => {\r\n        /* setCalendar(buildCalendar(value))\r\n       console.log(moment().startOf('month').format(\"D\"));\r\n        console.log(moment().endOf('month').format(\"D\"));*/\r\n\r\n\r\n        const end = Number(moment(value).endOf('month').format(\"D\"))\r\n\r\n        let AllDaysInMonth = []\r\n        for (let i=1; i<=end; i++){\r\n            if(i<10){\r\n                AllDaysInMonth.push(`0${i}`);\r\n            }else{\r\n                AllDaysInMonth.push(`${i}`);\r\n            }\r\n        }\r\n\r\n        setAllDayList(AllDaysInMonth);\r\n\r\n    }, [value])\r\n\r\n    console.log(allDayList);\r\n\r\n/*    function buildCalendar(date) {\r\n        const a = [];\r\n        const startDay = date.clone().startOf(\"month\").startOf(\"week\")\r\n        const endDay = date.clone().endOf(\"month\").endOf(\"week\");\r\n        const _date = startDay.clone().subtract(1, \"day\");\r\n\r\n        while (_date.isBefore(endDay, \"day\")) {\r\n            a.push(\r\n                Array(7)\r\n                .fill(0)\r\n                .map(() => _date.add(1, \"day\").clone())\r\n            );\r\n        }\r\n        return a;\r\n    }*/\r\n\r\n    function currMonthName() {\r\n        return value.format(\"MMMM\");\r\n    }\r\n\r\n    function currYear() {\r\n        return value.format(\"YYYY\");\r\n    }\r\n\r\n    function prevMonth() {\r\n        return value.clone().subtract(1, \"month\");\r\n    }\r\n\r\n    function nextMonth() {\r\n        return value.clone().add(1, \"month\");\r\n    }\r\n\r\n    const currentDay = () => { \r\n        if(Number(value.format(\"D\"))<10){\r\n            return \"0\"+value.format(\"D\");\r\n        } else{\r\n         return value.format(\"D\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n\t        <div className=\"list\">\r\n\r\n            {/* \r\n            {\r\n                [...Array(Number(moment('2020/12', 'YYYY/MM').startOf('month').format(\"day\")[0]))].map((item, index)=> {\r\n                    return (\r\n                         <div className=\"singleList\">\r\n                            <span></span>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            */}\r\n\r\n\t        {\r\n\t        \t/*calendar.map((week, i)=> {\r\n\t        \t\treturn (\r\n\t        \t\t\t<Fragment key={i}>\r\n\t        \t\t\t{\r\n\t        \t\t\t\tweek.map((day, i)=> {\r\n\t        \t\t\t\t\treturn (\r\n\t        \t\t\t\t\t\t<Fragment key={i}>\r\n\t        \t\t\t\t\t\t\t{\r\n\t        \t\t\t\t\t\t\t\tday.format(\"D\") === currentDay() && date.format(\"YYYY\") === day.format(\"YYYY\") && day.format(\"MMMM\") == date.format(\"MMMM\")\r\n                                            ? <div key={i} className=\"singleList\">\r\n                                                <span>{day.format(\"D\").toString()}</span>\r\n                                                <span className=\"today\">Today</span>\r\n                                                </div>\r\n                                            : <div key={i} className=\"singleList\">\r\n                                                <span>{day.format(\"D\").toString()}</span>\r\n                                                </div>\r\n\t        \t\t\t\t\t\t\t}\r\n\t        \t\t\t\t\t\t</Fragment>\r\n\t        \t\t\t\t\t)\r\n\t        \t\t\t\t})\r\n\t        \t\t\t}\r\n\t        \t\t\t</Fragment>\r\n\t        \t\t)\r\n\t        \t})*/\r\n\t        }\r\n\r\n            {\r\n                [...Array(Number(moment(value).startOf('month').format(\"day\")[0]))].map((item, index)=> {\r\n                    return (\r\n                         <div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n\r\n            {\r\n                allDayList.length > 0 && \r\n                allDayList.map((item,i)=> {\r\n                    return (\r\n                        <Fragment key={i}>\r\n                        {console.log(currentDay())}\r\n                            {\r\n                                item === currentDay() && moment(date).format(\"YYYY\") === moment(value).format(\"YYYY\") && moment(date).format(\"MMMM\") === moment(value).format(\"MMMM\") ?\r\n                                <div className=\"singleList\">\r\n                                    <span>{item}</span>\r\n                                    <span className=\"today\">Today</span>\r\n                                </div>\r\n                                :  <div className=\"singleList\">\r\n                                    <span>{item}</span>\r\n                                </div>\r\n                            }\r\n                        </Fragment>\r\n                    )\r\n                })\r\n            }\r\n\r\n\t\t\t</div>\r\n\t\t\t<div className=\"footer\">\r\n                {\r\n                    moment(\"10-2020\", \"MM-YYYY\").format(\"YYYY\") === moment(value).format(\"YYYY\") && moment(\"10-2020\", \"MM-YYYY\").format(\"MMMM\") === moment(value).format(\"MMMM\")\r\n\t\t\t\t    ? \"\"\r\n                    : <span onClick={() => setValue(prevMonth())}>prev</span>\r\n                }\r\n\t\t\t\t<div className=\"monthYear\">\r\n\t\t\t\t\t{currMonthName()}, \r\n\t\t\t\t\t{currYear()}\r\n\t\t\t\t</div>\r\n\t\t\t\t<span onClick={() => setValue(nextMonth())}>next</span>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n    )\r\n}\r\nexport default Body;","import React, {Fragment} from 'react';\r\n\r\nconst weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"header\">\r\n        \t{\r\n        \t\tweekDays.map((item,index)=> {\r\n        \t\t\treturn (\r\n        \t\t\t\t<span className=\"header-day\" key={index}>\r\n        \t\t\t\t\t{item}\r\n        \t\t\t\t</span>\r\n        \t\t\t)\r\n        \t\t})\r\n        \t}\r\n      </div>\r\n      <div className=\"header-mobile\">\r\n        Calendar\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst Footer = (props) => {\r\n  return (\r\n    <footer>\r\n    \tDevelop & Design By Hasan-Py &copy; Copyright {moment().format(\"YYYY\")}\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport Body from './components/Body';\nimport Header from './components/Header';\nimport './style.css'\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \t<Header/>\n      \t<Body/>\n      \t<Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}